Traceback (most recent call last):
  File "/usr/local/lib/python3.9/site-packages/jupyter_cache/executors/utils.py", line 51, in single_nb_execution
    executenb(
  File "/usr/local/lib/python3.9/site-packages/nbclient/client.py", line 1093, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/usr/local/lib/python3.9/site-packages/nbclient/util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/usr/local/lib/python3.9/site-packages/nbclient/util.py", line 62, in just_run
    return loop.run_until_complete(coro)
  File "/usr/local/Cellar/python@3.9/3.9.18/Frameworks/Python.framework/Versions/3.9/lib/python3.9/asyncio/base_events.py", line 647, in run_until_complete
    return future.result()
  File "/usr/local/lib/python3.9/site-packages/nbclient/client.py", line 559, in async_execute
    await self.async_execute_cell(
  File "/usr/local/lib/python3.9/site-packages/nbclient/client.py", line 854, in async_execute_cell
    self._check_raise_for_error(cell, exec_reply)
  File "/usr/local/lib/python3.9/site-packages/nbclient/client.py", line 756, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import numpy as np
from sklearn.impute import SimpleImputer
imp = SimpleImputer(missing_values=np.nan, strategy='mean')
imp.fit([[1, 2], [np.nan, 3], [4, 5]])
print(imp.transform(X))
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mValueError[0m                                Traceback (most recent call last)
Input [0;32mIn [2][0m, in [0;36m<module>[0;34m[0m
[1;32m      3[0m imp [38;5;241m=[39m SimpleImputer(missing_values[38;5;241m=[39mnp[38;5;241m.[39mnan, strategy[38;5;241m=[39m[38;5;124m'[39m[38;5;124mmean[39m[38;5;124m'[39m)
[1;32m      4[0m imp[38;5;241m.[39mfit([[[38;5;241m1[39m, [38;5;241m2[39m], [np[38;5;241m.[39mnan, [38;5;241m3[39m], [[38;5;241m4[39m, [38;5;241m5[39m]])
[0;32m----> 5[0m [38;5;28mprint[39m([43mimp[49m[38;5;241;43m.[39;49m[43mtransform[49m[43m([49m[43mX[49m[43m)[49m)

File [0;32m/usr/local/lib/python3.9/site-packages/sklearn/utils/_set_output.py:142[0m, in [0;36m_wrap_method_output.<locals>.wrapped[0;34m(self, X, *args, **kwargs)[0m
[1;32m    140[0m [38;5;129m@wraps[39m(f)
[1;32m    141[0m [38;5;28;01mdef[39;00m [38;5;21mwrapped[39m([38;5;28mself[39m, X, [38;5;241m*[39margs, [38;5;241m*[39m[38;5;241m*[39mkwargs):
[0;32m--> 142[0m     data_to_wrap [38;5;241m=[39m [43mf[49m[43m([49m[38;5;28;43mself[39;49m[43m,[49m[43m [49m[43mX[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[43margs[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43mkwargs[49m[43m)[49m
[1;32m    143[0m     [38;5;28;01mif[39;00m [38;5;28misinstance[39m(data_to_wrap, [38;5;28mtuple[39m):
[1;32m    144[0m         [38;5;66;03m# only wrap the first output for cross decomposition[39;00m
[1;32m    145[0m         [38;5;28;01mreturn[39;00m (
[1;32m    146[0m             _wrap_data_with_container(method, data_to_wrap[[38;5;241m0[39m], X, [38;5;28mself[39m),
[1;32m    147[0m             [38;5;241m*[39mdata_to_wrap[[38;5;241m1[39m:],
[1;32m    148[0m         )

File [0;32m/usr/local/lib/python3.9/site-packages/sklearn/impute/_base.py:550[0m, in [0;36mSimpleImputer.transform[0;34m(self, X)[0m
[1;32m    535[0m [38;5;124;03m"""Impute all missing values in `X`.[39;00m
[1;32m    536[0m 
[1;32m    537[0m [38;5;124;03mParameters[39;00m
[0;32m   (...)[0m
[1;32m    546[0m [38;5;124;03m    `X` with imputed values.[39;00m
[1;32m    547[0m [38;5;124;03m"""[39;00m
[1;32m    548[0m check_is_fitted([38;5;28mself[39m)
[0;32m--> 550[0m X [38;5;241m=[39m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_validate_input[49m[43m([49m[43mX[49m[43m,[49m[43m [49m[43min_fit[49m[38;5;241;43m=[39;49m[38;5;28;43;01mFalse[39;49;00m[43m)[49m
[1;32m    551[0m statistics [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39mstatistics_
[1;32m    553[0m [38;5;28;01mif[39;00m X[38;5;241m.[39mshape[[38;5;241m1[39m] [38;5;241m!=[39m statistics[38;5;241m.[39mshape[[38;5;241m0[39m]:

File [0;32m/usr/local/lib/python3.9/site-packages/sklearn/impute/_base.py:343[0m, in [0;36mSimpleImputer._validate_input[0;34m(self, X, in_fit)[0m
[1;32m    341[0m         [38;5;28;01mraise[39;00m new_ve [38;5;28;01mfrom[39;00m [38;5;28mNone[39m
[1;32m    342[0m     [38;5;28;01melse[39;00m:
[0;32m--> 343[0m         [38;5;28;01mraise[39;00m ve
[1;32m    345[0m [38;5;28;01mif[39;00m in_fit:
[1;32m    346[0m     [38;5;66;03m# Use the dtype seen in `fit` for non-`fit` conversion[39;00m
[1;32m    347[0m     [38;5;28mself[39m[38;5;241m.[39m_fit_dtype [38;5;241m=[39m X[38;5;241m.[39mdtype

File [0;32m/usr/local/lib/python3.9/site-packages/sklearn/impute/_base.py:326[0m, in [0;36mSimpleImputer._validate_input[0;34m(self, X, in_fit)[0m
[1;32m    323[0m     force_all_finite [38;5;241m=[39m [38;5;28;01mTrue[39;00m
[1;32m    325[0m [38;5;28;01mtry[39;00m:
[0;32m--> 326[0m     X [38;5;241m=[39m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_validate_data[49m[43m([49m
[1;32m    327[0m [43m        [49m[43mX[49m[43m,[49m
[1;32m    328[0m [43m        [49m[43mreset[49m[38;5;241;43m=[39;49m[43min_fit[49m[43m,[49m
[1;32m    329[0m [43m        [49m[43maccept_sparse[49m[38;5;241;43m=[39;49m[38;5;124;43m"[39;49m[38;5;124;43mcsc[39;49m[38;5;124;43m"[39;49m[43m,[49m
[1;32m    330[0m [43m        [49m[43mdtype[49m[38;5;241;43m=[39;49m[43mdtype[49m[43m,[49m
[1;32m    331[0m [43m        [49m[43mforce_all_finite[49m[38;5;241;43m=[39;49m[43mforce_all_finite[49m[43m,[49m
[1;32m    332[0m [43m        [49m[43mcopy[49m[38;5;241;43m=[39;49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mcopy[49m[43m,[49m
[1;32m    333[0m [43m    [49m[43m)[49m
[1;32m    334[0m [38;5;28;01mexcept[39;00m [38;5;167;01mValueError[39;00m [38;5;28;01mas[39;00m ve:
[1;32m    335[0m     [38;5;28;01mif[39;00m [38;5;124m"[39m[38;5;124mcould not convert[39m[38;5;124m"[39m [38;5;129;01min[39;00m [38;5;28mstr[39m(ve):

File [0;32m/usr/local/lib/python3.9/site-packages/sklearn/base.py:535[0m, in [0;36mBaseEstimator._validate_data[0;34m(self, X, y, reset, validate_separately, **check_params)[0m
[1;32m    533[0m     [38;5;28;01mraise[39;00m [38;5;167;01mValueError[39;00m([38;5;124m"[39m[38;5;124mValidation should be done on X, y or both.[39m[38;5;124m"[39m)
[1;32m    534[0m [38;5;28;01melif[39;00m [38;5;129;01mnot[39;00m no_val_X [38;5;129;01mand[39;00m no_val_y:
[0;32m--> 535[0m     X [38;5;241m=[39m [43mcheck_array[49m[43m([49m[43mX[49m[43m,[49m[43m [49m[43minput_name[49m[38;5;241;43m=[39;49m[38;5;124;43m"[39;49m[38;5;124;43mX[39;49m[38;5;124;43m"[39;49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[43mcheck_params[49m[43m)[49m
[1;32m    536[0m     out [38;5;241m=[39m X
[1;32m    537[0m [38;5;28;01melif[39;00m no_val_X [38;5;129;01mand[39;00m [38;5;129;01mnot[39;00m no_val_y:

File [0;32m/usr/local/lib/python3.9/site-packages/sklearn/utils/validation.py:900[0m, in [0;36mcheck_array[0;34m(array, accept_sparse, accept_large_sparse, dtype, order, copy, force_all_finite, ensure_2d, allow_nd, ensure_min_samples, ensure_min_features, estimator, input_name)[0m
[1;32m    898[0m     [38;5;66;03m# If input is 1D raise error[39;00m
[1;32m    899[0m     [38;5;28;01mif[39;00m array[38;5;241m.[39mndim [38;5;241m==[39m [38;5;241m1[39m:
[0;32m--> 900[0m         [38;5;28;01mraise[39;00m [38;5;167;01mValueError[39;00m(
[1;32m    901[0m             [38;5;124m"[39m[38;5;124mExpected 2D array, got 1D array instead:[39m[38;5;130;01m\n[39;00m[38;5;124marray=[39m[38;5;132;01m{}[39;00m[38;5;124m.[39m[38;5;130;01m\n[39;00m[38;5;124m"[39m
[1;32m    902[0m             [38;5;124m"[39m[38;5;124mReshape your data either using array.reshape(-1, 1) if [39m[38;5;124m"[39m
[1;32m    903[0m             [38;5;124m"[39m[38;5;124myour data has a single feature or array.reshape(1, -1) [39m[38;5;124m"[39m
[1;32m    904[0m             [38;5;124m"[39m[38;5;124mif it contains a single sample.[39m[38;5;124m"[39m[38;5;241m.[39mformat(array)
[1;32m    905[0m         )
[1;32m    907[0m [38;5;28;01mif[39;00m dtype_numeric [38;5;129;01mand[39;00m array[38;5;241m.[39mdtype[38;5;241m.[39mkind [38;5;129;01min[39;00m [38;5;124m"[39m[38;5;124mUSV[39m[38;5;124m"[39m:
[1;32m    908[0m     [38;5;28;01mraise[39;00m [38;5;167;01mValueError[39;00m(
[1;32m    909[0m         [38;5;124m"[39m[38;5;124mdtype=[39m[38;5;124m'[39m[38;5;124mnumeric[39m[38;5;124m'[39m[38;5;124m is not compatible with arrays of bytes/strings.[39m[38;5;124m"[39m
[1;32m    910[0m         [38;5;124m"[39m[38;5;124mConvert your data to numeric values explicitly instead.[39m[38;5;124m"[39m
[1;32m    911[0m     )

[0;31mValueError[0m: Expected 2D array, got 1D array instead:
array=[ 789.73950195  778.48028564  820.66223145  951.75146484 1142.41357422
 1340.40576172 1485.84899902 1686.71533203 1672.89733887 1683.21887207
 1733.16369629 1708.79638672 1717.03918457 1686.7277832  1614.70727539
 1662.88574219 1819.65490723 2039.40917969 2054.3815918  1864.98071289
 1558.92687988 1121.76098633  901.66052246  840.00140381  807.53955078
  787.1607666   798.59619141  907.33856201 1122.89770508 1301.90332031
 1447.79833984 1504.14526367 1264.86633301 1517.98571777 1497.65588379
 1535.8704834  1470.72045898 1519.08056641 1354.71630859 1490.4708252
 1644.65637207 1699.89355469 1937.18054199 1814.11157227 1398.07824707
 1113.33337402  930.78491211  872.48132324  778.56170654  724.97277832
  729.55133057  839.13671875 1005.11901855 1165.40319824 1342.07983398
 1395.83935547 1445.84289551 1410.65881348 1397.22436523 1401.24816895
 1466.2557373  1570.61340332 1513.4041748  1542.7833252  1638.52062988
 1692.25976562 1747.94372559 1622.26184082 1328.52502441 1036.2199707
  878.88452148  806.00726318  769.5848999   746.6829834   777.1796875
  851.1953125 ].
Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample.
ValueError: Expected 2D array, got 1D array instead:
array=[ 789.73950195  778.48028564  820.66223145  951.75146484 1142.41357422
 1340.40576172 1485.84899902 1686.71533203 1672.89733887 1683.21887207
 1733.16369629 1708.79638672 1717.03918457 1686.7277832  1614.70727539
 1662.88574219 1819.65490723 2039.40917969 2054.3815918  1864.98071289
 1558.92687988 1121.76098633  901.66052246  840.00140381  807.53955078
  787.1607666   798.59619141  907.33856201 1122.89770508 1301.90332031
 1447.79833984 1504.14526367 1264.86633301 1517.98571777 1497.65588379
 1535.8704834  1470.72045898 1519.08056641 1354.71630859 1490.4708252
 1644.65637207 1699.89355469 1937.18054199 1814.11157227 1398.07824707
 1113.33337402  930.78491211  872.48132324  778.56170654  724.97277832
  729.55133057  839.13671875 1005.11901855 1165.40319824 1342.07983398
 1395.83935547 1445.84289551 1410.65881348 1397.22436523 1401.24816895
 1466.2557373  1570.61340332 1513.4041748  1542.7833252  1638.52062988
 1692.25976562 1747.94372559 1622.26184082 1328.52502441 1036.2199707
  878.88452148  806.00726318  769.5848999   746.6829834   777.1796875
  851.1953125 ].
Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample.

